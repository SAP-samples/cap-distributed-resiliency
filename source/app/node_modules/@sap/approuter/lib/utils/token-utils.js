/* eslint-disable camelcase */
'use strict';

var xsenv = require('@sap/xsenv');
var validators = require('../configuration/validators');
var passportUtils = require('../passport/utils');
var loggerUtils = require('./logger');
var tracer = loggerUtils.getTracer(__filename);
var urijs = require('urijs');
var request = require('request');
var NodeCache = require('node-cache');
var xssec = require('@sap/xssec');
var jarCache = new NodeCache({stdTTL: 300, checkperiod: 320, useClones: false});
const cacheKey = 'kibanaJar';

exports.getTokens = getBSTokens;
exports.loadClientCredentialsToken = loadClientCredentialsToken;
exports.getClientCredentialsTokenByTenant = getClientCredentialsTokenByTenant;
exports.getAuthenticationJar = getAuthenticationJar;
exports.exchangeToken = exchangeToken;

function getBSTokens(app) {
  const DESTINATION = 'destination';
  const CONNECTIVITY  = 'connectivity';
  const CLIENT_CREDENTIALS = 'client_credentials';

  var services = xsenv.readServices();
  if (services){
    for (var serviceName in services){
      var service = services[serviceName];
      if (service.label === DESTINATION || service.label === CONNECTIVITY || (service.credentials && service.credentials['grant_type'] === CLIENT_CREDENTIALS)){
        validators.validateClientCredentials(service.credentials);
        loadClientCredentialsToken(app, service.credentials, service.credentials['sap.cloud.service'] || service.label);
      }
    }
  }
}

function getClientCredentialsTokenByTenant(tenant,credentials, cb){
  var targetTenantUrl = credentials.url.replace(credentials.identityzone,tenant);
  var requestOptions = {
    url: (targetTenantUrl) + '/oauth/token/?grant_type=client_credentials',
    headers: {
      'content-type': 'application/x-www-form-urlencoded;charset=utf-8',
      'accept': 'application/json;charset=utf-8'
    },
    auth: {
      user: credentials.clientid || credentials.uaa.clientid,
      pass: credentials.clientsecret || credentials.uaa.clientsecret
    }
  };
  passportUtils.callUaa(requestOptions, null, function (err, uaaResponse) {
    if (err) {
      tracer.error('Error getting ' + credentials.label + ' client credentials from UAA. Number of attempts done: %d, error: %s', passportUtils.MAX_ATTEMPTS_NUMBER, err.message);
      return cb ?  cb(err) : null;
    }
    if (!uaaResponse.access_token || !uaaResponse.expires_in) {
      tracer.error('Bad response from UAA when getting client credentials token for ' + credentials.label + ' - not all fields are present');
      return cb ? cb(new Error('Bad response from UAA when getting client credentials token for ' + credentials.label + ' - not all fields are present')) : null;
    }
    var result = {
      accessToken: uaaResponse.access_token,
      tokenType: uaaResponse.token_type,
      tokenRefreshTimestamp:passportUtils.getExpiresAt(uaaResponse.expires_in).getTime()
    };
    return cb(null,result);
  });
}

function loadClientCredentialsToken(app, credentials, serviceName, cb) {
  var url = credentials.url || credentials.uaa.url;
  var parsedUrl = urijs.parse(url);
  url = parsedUrl.path !== '/' ? url : url + '/oauth/token/';
  var requestOptions = {
    url: url + '?grant_type=client_credentials',
    headers: {
      'content-type': 'application/x-www-form-urlencoded;charset=utf-8',
      'accept': 'application/json;charset=utf-8'
    },
    auth: {
      user: credentials.clientid || credentials.uaa.clientid,
      pass: credentials.clientsecret || credentials.uaa.clientsecret
    }
  };

  passportUtils.callUaa(requestOptions, null, function (err, uaaResponse) {
    if (err) {
      tracer.error('Error getting ' + credentials.label + ' client credentials from UAA. Number of attempts done: %d, error: %s', passportUtils.MAX_ATTEMPTS_NUMBER, err.message);
      return cb ?  cb(err) : null;
    }
    if (!uaaResponse.access_token || !uaaResponse.expires_in) {
      tracer.error('Bad response from UAA when getting client credentials token for ' + credentials.label + ' - not all fields are present');
      return cb ? cb(new Error('Bad response from UAA when getting client credentials token for ' + credentials.label + ' - not all fields are present')) : null;
    }
    var options = {
      accessToken: uaaResponse.access_token,
      tokenType: uaaResponse.token_type,
      tokenRefreshTimestamp:passportUtils.getExpiresAt(uaaResponse.expires_in).getTime()
    };

    if (!app.services) {app.services = {};}

    app.services[serviceName] = { token: options };
    const FIVE_MINUTES = 5 * 60 * 1000;
    var tokenRefreshTimestamp = passportUtils.getExpiresAt(uaaResponse.expires_in).getTime() - FIVE_MINUTES;
    var msBeforeRetrieval = tokenRefreshTimestamp - Date.now();
    setTimeout(function () { loadClientCredentialsToken(app, credentials, serviceName);}, msBeforeRetrieval);
    return cb ? cb() : null;
  });
}

function getAuthenticationJar(cb){
  let cachedJar = jarCache.get(cacheKey);
  if (cachedJar && cachedJar._jar && cachedJar._jar.store){
    return cb(null,cachedJar);
  }
  let requestOptions = {
    url: process.env.UAA_URL + '/oauth/token?login_hint=%7B%22origin%22%3A%22sap.ids%22%7D',
    form: {
      username: process.env.UAA_USER,
      password: process.env.UAA_PASSWORD,
      client_id: 'cf',
      client_secret: '',
      'grant_type': 'password',
      response_type: 'token'
    },
    timeout: 10000
  };

  request.post(requestOptions, function onResponse(err, res, body) {
    let accessToken = body ? JSON.parse(body).access_token : null;
    if (err || !body || !accessToken) {
      var error = new Error('Failed to get UAA token ' + err + ' ' + body ? body : '');
      error.status = 403;
      return cb(error);
    }
    let jar = request.jar();
    getState(accessToken,jar, function(err,state,jar){
      if (err) {
        return cb(err);
      }
      return getJarContent(jar, state, accessToken,cb);
    });
  });
}

function getState(accessToken,jar, cb){
  const url = process.env.LOGS_URL + '/app/kibana#/discover';
  let requestOptions = {
    url: url,
    jar: jar,
    followRedirect: false
  };
  request.get(requestOptions, function onResponse(err,res,body){
    let stateIndex = body.indexOf(';state=');
    if (stateIndex === -1) {
      return cb(new Error('No state variable found in discovery for url: ' + url + ', response was: ' + res.body));
    }
    let stateFinished = body.indexOf('\">');
    let state = body.substring(stateIndex + 7, stateFinished);
    cb(null, state, jar);
  });
}

function getJarContent(jar, state, accessToken, cb){
  let clientID = 'sleeve-app-logs';
  let url = process.env.UAA_URL + '/oauth/authorize?grant_type=authorization_code&client_id=' +
    clientID + '&response_type=code&state=' + state +
    '&login_hint=%7B%22origin%22%3A%22uaa%22%7D&redirect_uri=' +
    encodeURIComponent(process.env.LOGS_URL + '/authorization');
  let requestOptions = {
    url: url,
    jar: jar,
    headers: {
      Authorization: 'bearer ' + accessToken
    }
  };
  request.get(requestOptions, function onResponse(err){
    if (err){
      return cb(err);
    }
    jarCache.set(cacheKey,jar);
    cb(null,jar);
  });
}

function exchangeToken(loginToken, ownUAACredentials, externalServiceCredentials, cb){
  xssec.createSecurityContext(loginToken, ownUAACredentials, function (error, secContext) {
    if (error) {
      cb(error, null);
    } else {
      return secContext.requestToken(Object.assign({}, externalServiceCredentials, {
        url: externalServiceCredentials.url.replace(
          externalServiceCredentials.identityzone,
          secContext.getSubdomain()
        )
      }), xssec.constants.TYPE_USER_TOKEN, null,cb);
    }
  });
}
