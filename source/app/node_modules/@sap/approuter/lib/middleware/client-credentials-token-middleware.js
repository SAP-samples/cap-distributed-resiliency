'use strict';
let tokenUtils      = require('../utils/token-utils');
let uaaUtils        = require('../utils/uaa-utils');
let xsenv           = require('@sap/xsenv');
const CONNECTIVITY  = 'connectivity';
const XSUAA         = 'xsuaa';

module.exports = function renewToken(req, res, next) {
  if (req.internalUrl && req.internalUrl.route && req.internalUrl.route.service) {
    let businessServiceData = getBusinessServiceData(req);
    if (businessServiceData) {
      tokenUtils.loadClientCredentialsToken(req.app, businessServiceData.credentials, businessServiceData.service, function(err){
        next(err);
      });
    } else {
      next();
    }
  } else if (req.internalUrl && req.internalUrl.route && req.internalUrl.route.destination &&
    req.app.services && req.app.services[CONNECTIVITY] && req.app.services[CONNECTIVITY].token) {

    let connectivityCredentials = getServiceByName(CONNECTIVITY);
    let ownUAACredentials       = getServiceByName(XSUAA);

    if (!connectivityCredentials || !ownUAACredentials){
      return next();
    }
    uaaUtils.getUaaConfig(req, function (err, uaaOptions) {
      if (err || !uaaOptions) {
        return next(err ? err : 'Invalid UAA options');
      }
      req.tenant = uaaOptions.tenant;
      if ((uaaOptions.tenantmode === 'shared' && uaaOptions.tenant !== ownUAACredentials.identityzone) &&
      ((req.app.services[CONNECTIVITY][uaaOptions.tenant] &&
          req.app.services[CONNECTIVITY][uaaOptions.tenant].token &&
          req.app.services[CONNECTIVITY][uaaOptions.tenant].token.tokenRefreshTimestamp - Date.now() <= 0) ||
          !req.app.services[CONNECTIVITY][uaaOptions.tenant])) {
        getClientCredentialTokenByTenant(uaaOptions.tenant, connectivityCredentials, function (err, token) {
          if (err) {
            return next(err);
          }
          req.app.services[CONNECTIVITY][uaaOptions.tenant] = {
            token: token
          };
          return next();
        });
      } else {
        return next();
      }
    });
  } else {
    next();
  }
};
function getClientCredentialTokenByTenant(tenant,credentials, cb){
  return tokenUtils.getClientCredentialsTokenByTenant(tenant, credentials, cb);
}
function getServiceByName(requestedServiceName){
  let services = xsenv.readServices();
  if (services){
    for (let serviceName in services){
      let service = services[serviceName];
      if (service.label === requestedServiceName){
        return service.credentials.uaa ? service.credentials.uaa : service.credentials;
      }
    }
  }
  return null;
}

function getBusinessServiceData(req){
  let serviceName = req.internalUrl.route.service;
  let serviceFromEnvCredentials = null;
  if (req && req.app && req.app.services && req.app.services[serviceName]){
    let service = req.app.services[serviceName];
    if (service.token && service.token.tokenRefreshTimestamp - Date.now() <= 0){
      serviceFromEnvCredentials = getServiceByName(serviceName);
      return {
        credentials: serviceFromEnvCredentials,
        service: service
      };
    }
  }
}